name: project-8

on: workflow_dispatch

env:
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  IMAGE_NAME: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/juice-shop
  SERVER_IP: 16.16.65.14
  SERVER_USER: ubuntu

jobs:
  create_cache:
    runs-on: ubuntu-latest
    container:
      image: node:18-bullseye
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: "true"
      - name: Install dependencies
        run: yarn install
        working-directory: ./juice-shop
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ./juice-shop/node_modules
            ./juice-shop/.yarn
            ./juice-shop/yarn.lock
          key: ${{ runner.os }}-yarn-${{ hashFiles('./juice-shop/yarn.lock') }}

  yarn_test:
    needs: create_cache
    runs-on: ubuntu-latest
    container:
      image: node:18-bullseye
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: "true"
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ./juice-shop/node_modules
            ./juice-shop/.yarn
            ./juice-shop/yarn.lock
          key: ${{ runner.os }}-yarn-${{ hashFiles('./juice-shop/yarn.lock') }}
      - name: Install package dependencies
        run: yarn install
        working-directory: ./juice-shop
      - name: Run tests
        run: yarn test
        working-directory: ./juice-shop

  gitleaks:
    needs: yarn_test
    runs-on: ubuntu-latest
    container:
      image: zricethezav/gitleaks
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: "true"
      - name: Run Gitleaks scan
        run: gitleaks detect --verbose --source ./juice-shop -f json -r gitleaks.json
        continue-on-error: true
      - name: Upload Gitleaks report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks.json

  njsscan:
    needs: yarn_test
    runs-on: ubuntu-latest
    container:
      image: python
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: "true"
      - name: Upgrade njsscan
        run: pip3 install --upgrade njsscan
      - name: Run njsscan
        run: njsscan --sarif -o njsscan.sarif --exit-warning ./juice-shop
        continue-on-error: true
      - name: Upload njsscan report
        uses: actions/upload-artifact@v4
        with:
          name: njsscan-report
          path: njsscan.sarif

  semgrep:
    needs: yarn_test
    runs-on: ubuntu-latest
    container:
      image: semgrep/semgrep
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: "true"
      - name: Semgrep
        run: semgrep scan --config=p/javascript ./juice-shop --json --output semgrep.json
        continue-on-error: true
      - name: Upload Semgrep report
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-report
          path: semgrep.json

  retirejs:
    needs: yarn_test
    runs-on: ubuntu-latest
    container:
      image: node:18-bullseye
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: "true"
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ./juice-shop/node_modules
            ./juice-shop/.yarn
            ./juice-shop/yarn.lock
          key: ${{ runner.os }}-yarn-${{ hashFiles('./juice-shop/yarn.lock') }}
      - name: Install retirejs
        run: npm install -g retire
      - name: Run retirejs
        run: retire --path ./juice-shop --outputformat json --outputpath retirejs.json
        continue-on-error: true
      - name: Upload RetireJS report
        uses: actions/upload-artifact@v4
        with:
          name: retirejs-report
          path: retirejs.json

  upload_reports:
    needs: [gitleaks, njsscan, semgrep, retirejs, trivy]
    runs-on: ubuntu-latest
    container:
      image: python
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: "true"
      - name: Install requests
        run: pip3 install requests
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4
      - name: Display structure of downloaded files
        run: ls -R
      - name: Upload gitleaks.json
        run: python3 project-8/upload-report.py gitleaks-report/gitleaks.json
      - name: Upload njsscan.sarif
        run: python3 project-8/upload-report.py njsscan-report/njsscan.sarif
      - name: Upload semgrep.json
        run: python3 project-8/upload-report.py semgrep-report/semgrep.json
      - name: Upload retirejs.json
        run: python3 project-8/upload-report.py retirejs-report/retirejs.json

  build_image:
    needs: [gitleaks, njsscan, semgrep, retirejs]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: "true"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Install AWS CLI
        run: sudo apt-get install -y awscli
      - name: Login to AWS ECR
        run: aws ecr get-login-password | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Docker Build and Push
        run: |
          docker build -t $IMAGE_NAME:${{ github.sha }} -t $IMAGE_NAME:latest ./juice-shop
          docker push $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:latest

  trivy:
    needs: build_image
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Install AWS CLI
        run: sudo apt-get install -y awscli
      - name: Install trivy
        run: curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
      - name: Login to AWS ECR
        run: aws ecr get-login-password | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Pull and check image
        run: |
          docker pull $IMAGE_NAME:${{ github.sha }}
          trivy image -f json -o trivy.json --severity HIGH,CRITICAL --exit-code 1 $IMAGE_NAME:${{ github.sha }}
        continue-on-error: true
      - name: Upload trivy report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy.json

  deploy_image:
    needs: upload_reports
    runs-on: ubuntu-latest
    container:
      image: debian:bullseye-slim
    steps:
      - name: Configure container for access
        run: apt update -y && apt install openssh-client -y
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Pull and update container
        run: |
          ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $IMAGE_NAME:latest"
          ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker stop juice-shop || true && docker rm juice-shop || true"
          ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d --name juice-shop -p 3000:3000 $IMAGE_NAME:latest"
